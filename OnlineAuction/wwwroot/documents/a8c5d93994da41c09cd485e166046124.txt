using System;
using System.Collections.Generic;

namespace BaiThiAPI.Models;

public partial class Account
{
    public int AccId { get; set; }

    public string CustomerName { get; set; } = null!;

    public string Email { get; set; } = null!;

    public string Phone { get; set; } = null!;

    public double Balance { get; set; }

    public string Password { get; set; } = null!;

    public virtual ICollection<TransactionDetail> TransactionDetails { get; set; } = new List<TransactionDetail>();
}

namespace BaiThiAPI.Dtos;

public class AccountDto
{
    public int AccId { get; set; }
    public string CustomerName { get; set; }
    public string Email { get; set; }
    public string Phone { get; set; }
    public double Balance { get; set; }
    public string Password { get; set; }

}

using BaiThiAPI.Dtos;

namespace BaiThiAPI.Services;

public interface AccountService
{
    public Task<bool> Register(AccountDto accountDto);
    Task<object?> Login(string email, string password);
    public Task<bool> PerformTransactionAsync(TransactionDetailDto transactionDto);
    Task<AccountDto> GetAccountByEmailAsync(string email);
    public Task<bool> UpdateAccountAsync(AccountDto accountDto);
}


using AutoMapper;
using BaiThiAPI.Dtos;
using BaiThiAPI.Models;
using BaiThiAPI.Services;
using Microsoft.EntityFrameworkCore;

public class AccountServiceImpl(DatabaseContext databaseContext, IMapper mapper, EmailService emailService, JWTService jWTService) : AccountService
{
    private readonly DatabaseContext databaseContext = databaseContext;
    private readonly IMapper mapper = mapper;
    private readonly EmailService emailService = emailService;
    private readonly JWTService jWTService = jWTService;

    public async Task<AccountDto> GetAccountByEmailAsync(string email)
    {
        var account = await databaseContext.Accounts.SingleOrDefaultAsync(a => a.Email == email);
        var accountDto = mapper.Map<AccountDto>(account);
        return accountDto;
    }
    public async Task<bool> Register(AccountDto accountDto)
    {
        if (databaseContext.Accounts.Any(a => a.Email == accountDto.Email))
        {
            return false;
        }

        var hashedPassword = BCrypt.Net.BCrypt.HashPassword(accountDto.Password);

        var account = mapper.Map<Account>(accountDto);
        account.Password = hashedPassword;

        databaseContext.Accounts.Add(account);
        await databaseContext.SaveChangesAsync();

        return true;
    }

    public async Task<object?> Login(string email, string password)
    {
        var account = await databaseContext.Accounts.SingleOrDefaultAsync(a => a.Email == email);

        if (account == null || !BCrypt.Net.BCrypt.Verify(password, account.Password))
        {
            return null;
        }

        var token = jWTService.GenerateToken(account);

        var accountDto = mapper.Map<AccountDto>(account);

        return new
        {
            Token = token,
            Account = accountDto
        };
    }

    public async Task<bool> PerformTransactionAsync(TransactionDetailDto transactionDto)
    {
        var account = await databaseContext.Accounts.FindAsync(transactionDto.AccId);

        if (account == null)
        {
            throw new Exception("Tài khoản không tồn tại.");
        }

        if (transactionDto.TransType == 2)
        {
            if (account.Balance < transactionDto.TransMoney)
            {
                throw new Exception("Số dư tài khoản không đủ.");
            }

            account.Balance -= transactionDto.TransMoney;
        }
        else if (transactionDto.TransType == 1)
        {
            account.Balance += transactionDto.TransMoney;
        }
        else
        {
            throw new Exception("Loại giao dịch không hợp lệ.");
        }

        var transaction = mapper.Map<TransactionDetail>(transactionDto);

        databaseContext.TransactionDetails.Add(transaction);
        await databaseContext.SaveChangesAsync();
        if (transactionDto.TransType == 2)
        {
            await emailService.SendEmailAsync(account.Email, "Thông báo giao dịch rút tiền",
            $"Bạn vừa thực hiện một giao dịch rút tiền với số tiền {transactionDto.TransMoney}.");
        }
        else
        {
            await emailService.SendEmailAsync(account.Email, "Thông báo giao dịch gửi tiền",
            $"Bạn vừa thực hiện một giao dịch gửi tiền với số tiền {transactionDto.TransMoney}.");
        }


        return true;
    }

    public async Task<bool> UpdateAccountAsync(AccountDto accountDto)
    {
        var account = await databaseContext.Accounts.FindAsync(accountDto.AccId);

        if (account == null)
        {
            return false;
        }

        if (!string.IsNullOrEmpty(accountDto.CustomerName))
        {
            account.CustomerName = accountDto.CustomerName;
        }

        if (!string.IsNullOrEmpty(accountDto.Phone))
        {
            account.Phone = accountDto.Phone;
        }

        if (!string.IsNullOrEmpty(accountDto.Password))
        {
            account.Password = BCrypt.Net.BCrypt.HashPassword(accountDto.Password);
        }

        databaseContext.Accounts.Update(account);
        await databaseContext.SaveChangesAsync();

        return true;
    }

}

using BaiThiAPI.Models;

namespace BaiThiAPI.Services;

public interface JWTService
{
    string GenerateToken(Account account);
}

using BaiThiAPI.Models;
using Microsoft.IdentityModel.Tokens;
using System.IdentityModel.Tokens.Jwt;
using System.Security.Claims;
using System.Text;

namespace BaiThiAPI.Services;

public class JWTServiceImpl : JWTService
{
    private readonly string _secretKey;
    private readonly string _issuer;
    private readonly string _audience;

    public JWTServiceImpl(IConfiguration configuration)
    {
        _secretKey = configuration["Jwt:SecretKey"];
        _issuer = configuration["Jwt:Issuer"];
        _audience = configuration["Jwt:Audience"];
    }

    public string GenerateToken(Account account)
    {
        var tokenHandler = new JwtSecurityTokenHandler();
        var key = Encoding.UTF8.GetBytes(_secretKey);
        var tokenDescriptor = new SecurityTokenDescriptor
        {
            Subject = new ClaimsIdentity(new Claim[]
            {
                new Claim(ClaimTypes.Name, account.CustomerName),
                new Claim(ClaimTypes.NameIdentifier, account.AccId.ToString())
            }),
            Expires = DateTime.UtcNow.AddHours(1),
            SigningCredentials = new SigningCredentials(new SymmetricSecurityKey(key), SecurityAlgorithms.HmacSha256Signature),
            Issuer = _issuer,
            Audience = _audience
        };
        var token = tokenHandler.CreateToken(tokenDescriptor);
        return tokenHandler.WriteToken(token);
    }
}

namespace BaiThiAPI.Dtos;
using AutoMapper;
using BaiThiAPI.Models;
using System.Globalization;

public class MappingProfile : Profile
{
    public MappingProfile()
    {
        CreateMap<Account, AccountDto>()
            .ForMember(dest => dest.Password, opt => opt.Ignore())
            .ReverseMap();

        CreateMap<TransactionDetail, TransactionDetailDto>()
            .ForMember(
                d => d.DateOfTrans,
                s => s.MapFrom(s => s.DateOfTrans.ToString("dd/MM/yyyy")))
            .ForMember(
                d => d.AccEmail,
                s => s.MapFrom(s => s.Acc.Email));

        CreateMap<TransactionDetailDto, TransactionDetail>()
            .ForMember(
                d => d.DateOfTrans,
                s => s.MapFrom(s => DateTime.ParseExact(s.DateOfTrans, "dd/MM/yyyy", CultureInfo.InvariantCulture))
            );
    }
}

using BaiThiAPI.Dtos;
using BaiThiAPI.Services;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;

namespace BaiThiAPI.Controllers;
[Route("api/[controller]")]
[ApiController]
public class AccountController(AccountService accountService, JWTService jWTService) : ControllerBase
{
    private readonly AccountService accountService = accountService;
    private readonly JWTService jWTService = jWTService;


    [HttpPost("register")]
    public async Task<IActionResult> Register([FromBody] AccountDto accountDto)
    {
        var result = await accountService.Register(accountDto);

        if (!result)
        {
            return BadRequest("Email đã tồn tại");
        }

        return Ok(new
        {
            Result = "success"
        });
    }

    [HttpPost("login")]
    public async Task<IActionResult> Login([FromBody] LoginRequestDto loginRequest)
    {
        var response = await accountService.Login(loginRequest.Email, loginRequest.Password);

        if (response == null)
        {
            return Unauthorized("Email hoặc mật khẩu không chính xác");
        }

        return Ok(response);
    }

    [HttpPost("transaction")]
    [Authorize]
    public async Task<IActionResult> PerformTransaction([FromBody] TransactionDetailDto transactionDetailDto)
    {
        try
        {
            var result = await accountService.PerformTransactionAsync(transactionDetailDto);
            return Ok(new
            {
                Result = "success"
            });
        }
        catch (Exception ex)
        {
            return BadRequest(ex.Message);
        }
    }

    [HttpPut("update")]
    [Authorize]
    public async Task<IActionResult> UpdateAccount([FromBody] AccountDto accountDto)
    {
        if (accountDto == null)
        {
            return BadRequest("Thông tin cập nhật không hợp lệ.");
        }

        var result = await accountService.UpdateAccountAsync(accountDto);

        if (!result)
        {
            return NotFound("Tài khoản không tồn tại.");
        }

        return Ok(new
        {
            Result = "success"
        });
    }

    [HttpGet("getAccountByEmail")]
    public async Task<IActionResult> GetAccountByEmail([FromQuery] string email)
    {
        var account = await accountService.GetAccountByEmailAsync(email);

        if (account == null)
        {
            return NotFound("Tài khoản không tồn tại.");
        }

        return Ok(account);
    }
}
